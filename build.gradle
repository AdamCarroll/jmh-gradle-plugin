/*
 * Copyright 2014 the original author or authors.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.jfrog.bintray' version '1.5'
    id 'com.jfrog.artifactory' version '3.0.0'
}

apply plugin: 'idea'
apply from: 'gradle/credentials.gradle'
apply from: 'gradle/compile.gradle'
apply from: 'gradle/funcTest.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/bintray.gradle'
apply from: 'gradle/artifactory.gradle'


dependencies {
    compile localGroovy()
    compile gradleApi()

    testCompile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.4'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
}

group='me.champeau.gradle'
version='0.3.0-SNAPSHOT'

task release {
    description = "Releases a version of the plugin on Artifactory and Bintray"
    dependsOn artifactoryPublish, bintrayUpload
}

task testSample(type:GradleBuild) {
    dependsOn(publishToMavenLocal)
    buildFile = 'src/test/resources/sample/build.gradle'
    startParameter.projectProperties.pluginVersion = rootProject.version
    tasks = ['jmh']
}

project.tasks.withType(Test) {
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        showStandardStreams = true
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}