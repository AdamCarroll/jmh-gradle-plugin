/*
 * Copyright 2014-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.gradle.build-scan' version '1.2'
    id 'me.champeau.buildscan-recipes' version '0.1.3'
    id 'com.jfrog.bintray' version '1.6'
    id 'com.jfrog.artifactory' version '4.2.0'
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'net.nemerosa.versioning' version '1.7.1'
    id 'com.github.ben-manes.versions' version '0.12.0'
    id 'com.gradle.plugin-publish' version '0.9.4'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'jacoco'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'

    recipes 'git-status', 'travis-ci', 'disk-usage', 'gc-stats'
    recipe 'git-commit', baseUrl: 'https://github.com/melix/jmh-gradle-plugin/tree'

    publishAlways()
}

apply plugin: 'idea'
apply from: 'gradle/credentials.gradle'
apply from: 'gradle/compile.gradle'
apply from: 'gradle/funcTest.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/bintray.gradle'
apply from: 'gradle/artifactory.gradle'
apply from: 'gradle/code-quality.gradle'

configurations {
    runner
    compile.extendsFrom runner
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    runner project(':runner')

    testCompile 'junit:junit:4.12'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
}

task release {
    description = "Releases a version of the plugin on Artifactory and Bintray"
    dependsOn artifactoryPublish, bintrayUpload
}

project.tasks.withType(Test) {
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        showStandardStreams = true
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

jacoco {
    toolVersion = '0.7.6.201602180812'
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

jar {
    from configurations.runner
}

task publishRelease(dependsOn: [bintrayUpload, publishPlugins]) {}